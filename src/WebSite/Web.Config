<?xml version="1.0"?>
<!-- 
    Note: As an alternative to hand editing this file you can use the 
    web admin tool to configure settings for your application. Use
    the Website->Asp.Net Configuration option in Visual Studio.
    A full list of settings and comments can be found in 
    machine.config.comments usually located in 
    \Windows\Microsoft.Net\Framework\v2.x\Config 
-->
<configuration>
	<!-- The configSections define a section for ASP.NET Atlas. -->
	<configSections>
		<sectionGroup name="microsoft.web" type="Microsoft.Web.Configuration.MicrosoftWebSectionGroup">
			<section name="converters" type="Microsoft.Web.Configuration.ConvertersSection" requirePermission="false"/>
			<section name="webServices" type="Microsoft.Web.Configuration.WebServicesSection" requirePermission="false"/>
			<section name="authenticationService" type="Microsoft.Web.Configuration.AuthenticationServiceSection" requirePermission="false"/>
			<section name="profileService" type="Microsoft.Web.Configuration.ProfileServiceSection" requirePermission="false"/>
		</sectionGroup>
	</configSections>
	<!-- The microsoft.web section defines items required for the Atlas framework. -->
	<microsoft.web>
		<converters>
			<add type="Microsoft.Web.Script.Serialization.Converters.DataSetConverter"/>
			<add type="Microsoft.Web.Script.Serialization.Converters.DataRowConverter"/>
			<add type="Microsoft.Web.Script.Serialization.Converters.DataTableConverter"/>
		</converters>
		<webServices enableBrowserAccess="true"/>
		<!-- Uncomment this line to enable the authentication service.
             <authenticationService enabled="true" />
        -->
		<!-- Uncomment these lines to enable the profile service. To allow profile properties to be retrieved 
             and modified in Atlas applications, you need to add each property name to the setProperties and 
             getProperties attributes.  If you intend for all properties to be available, you can use "*"
             as a shorthand rather than enumerating each property
        
            <profileService enabled="true" setProperties="propertyname1;propertyname2" getProperties="propertyname1;propertyname2" />
        -->
	</microsoft.web>
	<appSettings>
		<!-- location for the HSLServices webservice -->
        <add key="HSLServices.HSLServices" value="http://hotspot.live-dev.com/HSLServicesV1/HSLServices.asmx" />
        <!-- the location for the help pages -->
		<add key="HelpURL" value="http://help.live-int.com"/>
        <!-- The number of requests per minute before an event is logged for an invalid path-->
        <add key="InvalidPath_Threshold" value="1000"/>        
	</appSettings>
	<connectionStrings/>
	<system.web>
		<pages enableViewState="false" enableViewStateMac="false">
			<controls>
				<add namespace="Microsoft.Web.UI" assembly="Microsoft.Web.Atlas" tagPrefix="atlas"/>
				<add namespace="Microsoft.Web.UI.Controls" assembly="Microsoft.Web.Atlas" tagPrefix="atlas"/>
			</controls>
		</pages>
		<!-- 
            Set compilation debug="true" to insert debugging 
            symbols into the compiled page. Because this 
            affects performance, set this value to true only 
            during development.
        -->
		<compilation debug="false">
			<buildProviders>
				<add extension=".asbx" type="Microsoft.Web.Services.BridgeBuildProvider"/>
			</buildProviders>
			<assemblies>
				<add assembly="System.Configuration.Install, Version=2.0.0.0, Culture=neutral, PublicKeyToken=B03F5F7F11D50A3A"/>
			</assemblies>
		</compilation>
		<!-- 
            ASMX is mapped to a new handler so that proxy javascripts can also be served. 
        -->
		<httpHandlers>
			<remove verb="*" path="*.asmx"/>
			<add verb="*" path="*.asmx" type="Microsoft.Web.Services.ScriptHandlerFactory" validate="false"/>
			<!--
              The MultiRequestHandler enables multiple requests to be handled in one
              roundtrip to the server. Its use requires Full Trust.
            -->
			<add verb="*" path="atlasbatchcall.axd" type="Microsoft.Web.Services.MultiRequestHandler" validate="false"/>
			<add verb="*" path="atlasglob.axd" type="Microsoft.Web.Globalization.GlobalizationHandler" validate="false"/>
			<!--
                The IFrameHandler enables a limited form of cross-domain calls to 'Atlas' web services.
                This should only be enabled if you need this functionality and you're willing to expose
                the data publicly on the Internet.
                To use it, you will also need to add the attribute [WebOperation(true, ResponseFormatMode.Json, true)]
                on the methods that you want to be called cross-domain.
                This attribute is by default on any DataService's GetData method.
                
                <add verb="*" path="iframecall.axd" type="Microsoft.Web.Services.IFrameHandler" validate="false"/>
            -->
			<add verb="*" path="*.asbx" type="Microsoft.Web.Services.ScriptHandlerFactory" validate="false"/>
		</httpHandlers>
		<httpModules>
			<add name="ScriptModule" type="Microsoft.Web.Services.ScriptModule"/>
			<add name="BridgeModule" type="Microsoft.Web.Services.BridgeModule"/>
			<add name="WebResourceCompression" type="Microsoft.Web.Services.WebResourceCompressionModule"/>
		</httpModules>
		<!--
            The <authentication> section enables configuration 
            of the security authentication mode used by 
            ASP.NET to identify an incoming user. 
        -->
		<authentication mode="None"/>
		<!--
            The <customErrors> section enables configuration 
            of what to do if/when an unhandled error occurs 
            during the execution of a request. Specifically, 
            it enables developers to configure html error pages 
            to be displayed in place of a error stack trace.
        -->
		<customErrors mode="On" defaultRedirect="web/Error.htm">
			<!--
            <error statusCode="403" redirect="NoAccess.htm"/>
            <error statusCode="404" redirect="FileNotFound.htm"/>
            -->
		</customErrors>
		<!--
            Configure the session state for the web site 
            mode=InProc: Maintain the session information within the process
            cookieless=false: Use cookies when available to track state 
            Timeout=10: Time out the seesion after 10 minutes
        -->
		<sessionState mode="InProc" cookieless="false" timeout="10"/>
		<!-- 
            Set the validation key so that the site can be used in a server farm 
            validationKey: Specifies the key used for validation to ensure that 
                           view state has not been tampered with.
            validation: Specifies the hashing algorithm for validation of data.
            decryptionKey: Specifies the key used to encrypt data. 
            decryption: Specifies the encryption algorithm to encrypt data.
        -->
		<machineKey validationKey="B35817F7D32E4F3F98FB771AF2DE722C2D129B07444143F6A6FEB934AB7E90B8C0915823B4634F669390098DA6DD1803B9B310F9D8464AC2942517AD1680C9E5" 
            validation="SHA1" 
            decryptionKey="B37BE91DDA8074E25E2E83068F4022D4BD1943162496DAB8CBCC88603F1437F1" 
            decryption="AES"/>
		<!--
            Turn off the wsdl for the HSLAppModelFacade web services
        -->
		<webServices>
			<protocols>
				<remove name="Documentation"/>
			</protocols>
		</webServices>
	</system.web>
</configuration>
